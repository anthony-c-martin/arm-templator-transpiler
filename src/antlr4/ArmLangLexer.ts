// Generated from ./src/antlr4/ArmLang.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ArmLangLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly T__17 = 18;
	public static readonly T__18 = 19;
	public static readonly Identifier = 20;
	public static readonly Number = 21;
	public static readonly String = 22;
	public static readonly WS = 23;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "Identifier", "Number", "String", "NonDigit", "Digit", 
		"NonzeroDigit", "StringEscapeSequence", "StringChar", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'input'", "'output'", "'resource'", "'{'", "'}'", "':'", "'['", 
		"']'", "'('", "')'", "','", "'string'", "'securestring'", "'int'", "'bool'", 
		"'object'", "'array'", "'true'", "'false'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, "Identifier", 
		"Number", "String", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ArmLangLexer._LITERAL_NAMES, ArmLangLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ArmLangLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ArmLangLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "ArmLang.g4"; }

	// @Override
	public get ruleNames(): string[] { return ArmLangLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ArmLangLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return ArmLangLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return ArmLangLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x19\xC2\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
		"\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v" +
		"\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03" +
		"\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03" +
		"\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03" +
		"\x15\x03\x15\x03\x15\x07\x15\x9A\n\x15\f\x15\x0E\x15\x9D\v\x15\x03\x16" +
		"\x03\x16\x07\x16\xA1\n\x16\f\x16\x0E\x16\xA4\v\x16\x03\x17\x03\x17\x07" +
		"\x17\xA8\n\x17\f\x17\x0E\x17\xAB\v\x17\x03\x17\x03\x17\x03\x18\x03\x18" +
		"\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C" +
		"\x05\x1C\xBA\n\x1C\x03\x1D\x06\x1D\xBD\n\x1D\r\x1D\x0E\x1D\xBE\x03\x1D" +
		"\x03\x1D\x02\x02\x02\x1E\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06" +
		"\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19" +
		"\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14" +
		"\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x021\x02\x023\x02\x025\x02" +
		"\x027\x02\x029\x02\x19\x03\x02\b\x05\x02C\\aac|\x03\x022;\x03\x023;\x06" +
		"\x02))^^pptt\x06\x02\f\f\x0F\x0F))^^\x05\x02\v\f\x0E\x0F\"\"\x02\xC2\x02" +
		"\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02" +
		"\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F" +
		"\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15" +
		"\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B" +
		"\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!" +
		"\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02" +
		"\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02" +
		"\x029\x03\x02\x02\x02\x03;\x03\x02\x02\x02\x05A\x03\x02\x02\x02\x07H\x03" +
		"\x02\x02\x02\tQ\x03\x02\x02\x02\vS\x03\x02\x02\x02\rU\x03\x02\x02\x02" +
		"\x0FW\x03\x02\x02\x02\x11Y\x03\x02\x02\x02\x13[\x03\x02\x02\x02\x15]\x03" +
		"\x02\x02\x02\x17_\x03\x02\x02\x02\x19a\x03\x02\x02\x02\x1Bh\x03\x02\x02" +
		"\x02\x1Du\x03\x02\x02\x02\x1Fy\x03\x02\x02\x02!~\x03\x02\x02\x02#\x85" +
		"\x03\x02\x02\x02%\x8B\x03\x02\x02\x02\'\x90\x03\x02\x02\x02)\x96\x03\x02" +
		"\x02\x02+\x9E\x03\x02\x02\x02-\xA5\x03\x02\x02\x02/\xAE\x03\x02\x02\x02" +
		"1\xB0\x03\x02\x02\x023\xB2\x03\x02\x02\x025\xB4\x03\x02\x02\x027\xB9\x03" +
		"\x02\x02\x029\xBC\x03\x02\x02\x02;<\x07k\x02\x02<=\x07p\x02\x02=>\x07" +
		"r\x02\x02>?\x07w\x02\x02?@\x07v\x02\x02@\x04\x03\x02\x02\x02AB\x07q\x02" +
		"\x02BC\x07w\x02\x02CD\x07v\x02\x02DE\x07r\x02\x02EF\x07w\x02\x02FG\x07" +
		"v\x02\x02G\x06\x03\x02\x02\x02HI\x07t\x02\x02IJ\x07g\x02\x02JK\x07u\x02" +
		"\x02KL\x07q\x02\x02LM\x07w\x02\x02MN\x07t\x02\x02NO\x07e\x02\x02OP\x07" +
		"g\x02\x02P\b\x03\x02\x02\x02QR\x07}\x02\x02R\n\x03\x02\x02\x02ST\x07\x7F" +
		"\x02\x02T\f\x03\x02\x02\x02UV\x07<\x02\x02V\x0E\x03\x02\x02\x02WX\x07" +
		"]\x02\x02X\x10\x03\x02\x02\x02YZ\x07_\x02\x02Z\x12\x03\x02\x02\x02[\\" +
		"\x07*\x02\x02\\\x14\x03\x02\x02\x02]^\x07+\x02\x02^\x16\x03\x02\x02\x02" +
		"_`\x07.\x02\x02`\x18\x03\x02\x02\x02ab\x07u\x02\x02bc\x07v\x02\x02cd\x07" +
		"t\x02\x02de\x07k\x02\x02ef\x07p\x02\x02fg\x07i\x02\x02g\x1A\x03\x02\x02" +
		"\x02hi\x07u\x02\x02ij\x07g\x02\x02jk\x07e\x02\x02kl\x07w\x02\x02lm\x07" +
		"t\x02\x02mn\x07g\x02\x02no\x07u\x02\x02op\x07v\x02\x02pq\x07t\x02\x02" +
		"qr\x07k\x02\x02rs\x07p\x02\x02st\x07i\x02\x02t\x1C\x03\x02\x02\x02uv\x07" +
		"k\x02\x02vw\x07p\x02\x02wx\x07v\x02\x02x\x1E\x03\x02\x02\x02yz\x07d\x02" +
		"\x02z{\x07q\x02\x02{|\x07q\x02\x02|}\x07n\x02\x02} \x03\x02\x02\x02~\x7F" +
		"\x07q\x02\x02\x7F\x80\x07d\x02\x02\x80\x81\x07l\x02\x02\x81\x82\x07g\x02" +
		"\x02\x82\x83\x07e\x02\x02\x83\x84\x07v\x02\x02\x84\"\x03\x02\x02\x02\x85" +
		"\x86\x07c\x02\x02\x86\x87\x07t\x02\x02\x87\x88\x07t\x02\x02\x88\x89\x07" +
		"c\x02\x02\x89\x8A\x07{\x02\x02\x8A$\x03\x02\x02\x02\x8B\x8C\x07v\x02\x02" +
		"\x8C\x8D\x07t\x02\x02\x8D\x8E\x07w\x02\x02\x8E\x8F\x07g\x02\x02\x8F&\x03" +
		"\x02\x02\x02\x90\x91\x07h\x02\x02\x91\x92\x07c\x02\x02\x92\x93\x07n\x02" +
		"\x02\x93\x94\x07u\x02\x02\x94\x95\x07g\x02\x02\x95(\x03\x02\x02\x02\x96" +
		"\x9B\x05/\x18\x02\x97\x9A\x05/\x18\x02\x98\x9A\x051\x19\x02\x99\x97\x03" +
		"\x02\x02\x02\x99\x98\x03\x02\x02\x02\x9A\x9D\x03\x02\x02\x02\x9B\x99\x03" +
		"\x02\x02\x02\x9B\x9C\x03\x02\x02\x02\x9C*\x03\x02\x02\x02\x9D\x9B\x03" +
		"\x02\x02\x02\x9E\xA2\x053\x1A\x02\x9F\xA1\x051\x19\x02\xA0\x9F\x03\x02" +
		"\x02\x02\xA1\xA4\x03\x02\x02\x02\xA2\xA0\x03\x02\x02\x02\xA2\xA3\x03\x02" +
		"\x02\x02\xA3,\x03\x02\x02\x02\xA4\xA2\x03\x02\x02\x02\xA5\xA9\x07)\x02" +
		"\x02\xA6\xA8\x057\x1C\x02\xA7\xA6\x03\x02\x02\x02\xA8\xAB\x03\x02\x02" +
		"\x02\xA9\xA7\x03\x02\x02\x02\xA9\xAA\x03\x02\x02\x02\xAA\xAC\x03\x02\x02" +
		"\x02\xAB\xA9\x03\x02\x02\x02\xAC\xAD\x07)\x02\x02\xAD.\x03\x02\x02\x02" +
		"\xAE\xAF\t\x02\x02\x02\xAF0\x03\x02\x02\x02\xB0\xB1\t\x03\x02\x02\xB1" +
		"2\x03\x02\x02\x02\xB2\xB3\t\x04\x02\x02\xB34\x03\x02\x02\x02\xB4\xB5\x07" +
		"^\x02\x02\xB5\xB6\t\x05\x02\x02\xB66\x03\x02\x02\x02\xB7\xBA\n\x06\x02" +
		"\x02\xB8\xBA\x055\x1B\x02\xB9\xB7\x03\x02\x02\x02\xB9\xB8\x03\x02\x02" +
		"\x02\xBA8\x03\x02\x02\x02\xBB\xBD\t\x07\x02\x02\xBC\xBB\x03\x02\x02\x02" +
		"\xBD\xBE\x03\x02\x02\x02\xBE\xBC\x03\x02\x02\x02\xBE\xBF\x03\x02\x02\x02" +
		"\xBF\xC0\x03\x02\x02\x02\xC0\xC1\b\x1D\x02\x02\xC1:\x03\x02\x02\x02\t" +
		"\x02\x99\x9B\xA2\xA9\xB9\xBE\x03\x02\x03\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ArmLangLexer.__ATN) {
			ArmLangLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ArmLangLexer._serializedATN));
		}

		return ArmLangLexer.__ATN;
	}

}


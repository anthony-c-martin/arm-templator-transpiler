// Generated from ./src/antlr4/ArmLang.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ArmLangLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly Identifier = 12;
	public static readonly Number = 13;
	public static readonly String = 14;
	public static readonly WS = 15;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "Identifier", "Number", "String", "NonDigit", "Digit", 
		"NonzeroDigit", "StringEscapeSequence", "StringChar", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'resource'", "'{'", "'}'", "':'", "'['", "']'", "'('", "')'", 
		"','", "'true'", "'false'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, "Identifier", "Number", 
		"String", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ArmLangLexer._LITERAL_NAMES, ArmLangLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ArmLangLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ArmLangLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "ArmLang.g4"; }

	// @Override
	public get ruleNames(): string[] { return ArmLangLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ArmLangLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return ArmLangLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return ArmLangLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x11{\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03" +
		"\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t" +
		"\x03\t\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\r\x03\r\x03\r\x07\rS\n\r\f\r\x0E\rV\v\r\x03\x0E\x03" +
		"\x0E\x07\x0EZ\n\x0E\f\x0E\x0E\x0E]\v\x0E\x03\x0F\x03\x0F\x07\x0Fa\n\x0F" +
		"\f\x0F\x0E\x0Fd\v\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11" +
		"\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x05\x14s\n\x14" +
		"\x03\x15\x06\x15v\n\x15\r\x15\x0E\x15w\x03\x15\x03\x15\x02\x02\x02\x16" +
		"\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02" +
		"\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D" +
		"\x02\x10\x1F\x02\x02!\x02\x02#\x02\x02%\x02\x02\'\x02\x02)\x02\x11\x03" +
		"\x02\b\x05\x02C\\aac|\x03\x022;\x03\x023;\x06\x02))^^pptt\x06\x02\f\f" +
		"\x0F\x0F))^^\x05\x02\v\f\x0E\x0F\"\"\x02{\x02\x03\x03\x02\x02\x02\x02" +
		"\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02" +
		"\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11" +
		"\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17" +
		"\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D" +
		"\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x03+\x03\x02\x02\x02\x054\x03\x02" +
		"\x02\x02\x076\x03\x02\x02\x02\t8\x03\x02\x02\x02\v:\x03\x02\x02\x02\r" +
		"<\x03\x02\x02\x02\x0F>\x03\x02\x02\x02\x11@\x03\x02\x02\x02\x13B\x03\x02" +
		"\x02\x02\x15D\x03\x02\x02\x02\x17I\x03\x02\x02\x02\x19O\x03\x02\x02\x02" +
		"\x1BW\x03\x02\x02\x02\x1D^\x03\x02\x02\x02\x1Fg\x03\x02\x02\x02!i\x03" +
		"\x02\x02\x02#k\x03\x02\x02\x02%m\x03\x02\x02\x02\'r\x03\x02\x02\x02)u" +
		"\x03\x02\x02\x02+,\x07t\x02\x02,-\x07g\x02\x02-.\x07u\x02\x02./\x07q\x02" +
		"\x02/0\x07w\x02\x0201\x07t\x02\x0212\x07e\x02\x0223\x07g\x02\x023\x04" +
		"\x03\x02\x02\x0245\x07}\x02\x025\x06\x03\x02\x02\x0267\x07\x7F\x02\x02" +
		"7\b\x03\x02\x02\x0289\x07<\x02\x029\n\x03\x02\x02\x02:;\x07]\x02\x02;" +
		"\f\x03\x02\x02\x02<=\x07_\x02\x02=\x0E\x03\x02\x02\x02>?\x07*\x02\x02" +
		"?\x10\x03\x02\x02\x02@A\x07+\x02\x02A\x12\x03\x02\x02\x02BC\x07.\x02\x02" +
		"C\x14\x03\x02\x02\x02DE\x07v\x02\x02EF\x07t\x02\x02FG\x07w\x02\x02GH\x07" +
		"g\x02\x02H\x16\x03\x02\x02\x02IJ\x07h\x02\x02JK\x07c\x02\x02KL\x07n\x02" +
		"\x02LM\x07u\x02\x02MN\x07g\x02\x02N\x18\x03\x02\x02\x02OT\x05\x1F\x10" +
		"\x02PS\x05\x1F\x10\x02QS\x05!\x11\x02RP\x03\x02\x02\x02RQ\x03\x02\x02" +
		"\x02SV\x03\x02\x02\x02TR\x03\x02\x02\x02TU\x03\x02\x02\x02U\x1A\x03\x02" +
		"\x02\x02VT\x03\x02\x02\x02W[\x05#\x12\x02XZ\x05!\x11\x02YX\x03\x02\x02" +
		"\x02Z]\x03\x02\x02\x02[Y\x03\x02\x02\x02[\\\x03\x02\x02\x02\\\x1C\x03" +
		"\x02\x02\x02][\x03\x02\x02\x02^b\x07)\x02\x02_a\x05\'\x14\x02`_\x03\x02" +
		"\x02\x02ad\x03\x02\x02\x02b`\x03\x02\x02\x02bc\x03\x02\x02\x02ce\x03\x02" +
		"\x02\x02db\x03\x02\x02\x02ef\x07)\x02\x02f\x1E\x03\x02\x02\x02gh\t\x02" +
		"\x02\x02h \x03\x02\x02\x02ij\t\x03\x02\x02j\"\x03\x02\x02\x02kl\t\x04" +
		"\x02\x02l$\x03\x02\x02\x02mn\x07^\x02\x02no\t\x05\x02\x02o&\x03\x02\x02" +
		"\x02ps\n\x06\x02\x02qs\x05%\x13\x02rp\x03\x02\x02\x02rq\x03\x02\x02\x02" +
		"s(\x03\x02\x02\x02tv\t\x07\x02\x02ut\x03\x02\x02\x02vw\x03\x02\x02\x02" +
		"wu\x03\x02\x02\x02wx\x03\x02\x02\x02xy\x03\x02\x02\x02yz\b\x15\x02\x02" +
		"z*\x03\x02\x02\x02\t\x02RT[brw\x03\x02\x03\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ArmLangLexer.__ATN) {
			ArmLangLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ArmLangLexer._serializedATN));
		}

		return ArmLangLexer.__ATN;
	}

}


// Generated from ./src/antlr4/ArmLang.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ArmLangLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly Identifier = 9;
	public static readonly Number = 10;
	public static readonly String = 11;
	public static readonly WS = 12;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "Identifier", 
		"Number", "String", "NonDigit", "Digit", "NonzeroDigit", "StringEscapeSequence", 
		"StringChar", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'resource'", "'{'", "'}'", "':'", "'['", "']'", "'true'", 
		"'false'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, "Identifier", "Number", "String", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ArmLangLexer._LITERAL_NAMES, ArmLangLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ArmLangLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ArmLangLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "ArmLang.g4"; }

	// @Override
	public get ruleNames(): string[] { return ArmLangLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ArmLangLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return ArmLangLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return ArmLangLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x0Eo\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02" +
		"\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07" +
		"\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\n\x03\n\x03\n\x07\nG\n\n\f\n\x0E\nJ\v\n\x03\v\x03\v\x07\vN\n\v" +
		"\f\v\x0E\vQ\v\v\x03\f\x03\f\x07\fU\n\f\f\f\x0E\fX\v\f\x03\f\x03\f\x03" +
		"\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11" +
		"\x03\x11\x05\x11g\n\x11\x03\x12\x06\x12j\n\x12\r\x12\x0E\x12k\x03\x12" +
		"\x03\x12\x02\x02\x02\x13\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06" +
		"\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19" +
		"\x02\x02\x1B\x02\x02\x1D\x02\x02\x1F\x02\x02!\x02\x02#\x02\x0E\x03\x02" +
		"\b\x05\x02C\\aac|\x03\x022;\x03\x023;\x06\x02))^^pptt\x06\x02\f\f\x0F" +
		"\x0F))^^\x05\x02\v\f\x0F\x0F\"\"\x02o\x02\x03\x03\x02\x02\x02\x02\x05" +
		"\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03" +
		"\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03" +
		"\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03" +
		"\x02\x02\x02\x02#\x03\x02\x02\x02\x03%\x03\x02\x02\x02\x05.\x03\x02\x02" +
		"\x02\x070\x03\x02\x02\x02\t2\x03\x02\x02\x02\v4\x03\x02\x02\x02\r6\x03" +
		"\x02\x02\x02\x0F8\x03\x02\x02\x02\x11=\x03\x02\x02\x02\x13C\x03\x02\x02" +
		"\x02\x15K\x03\x02\x02\x02\x17R\x03\x02\x02\x02\x19[\x03\x02\x02\x02\x1B" +
		"]\x03\x02\x02\x02\x1D_\x03\x02\x02\x02\x1Fa\x03\x02\x02\x02!f\x03\x02" +
		"\x02\x02#i\x03\x02\x02\x02%&\x07t\x02\x02&\'\x07g\x02\x02\'(\x07u\x02" +
		"\x02()\x07q\x02\x02)*\x07w\x02\x02*+\x07t\x02\x02+,\x07e\x02\x02,-\x07" +
		"g\x02\x02-\x04\x03\x02\x02\x02./\x07}\x02\x02/\x06\x03\x02\x02\x0201\x07" +
		"\x7F\x02\x021\b\x03\x02\x02\x0223\x07<\x02\x023\n\x03\x02\x02\x0245\x07" +
		"]\x02\x025\f\x03\x02\x02\x0267\x07_\x02\x027\x0E\x03\x02\x02\x0289\x07" +
		"v\x02\x029:\x07t\x02\x02:;\x07w\x02\x02;<\x07g\x02\x02<\x10\x03\x02\x02" +
		"\x02=>\x07h\x02\x02>?\x07c\x02\x02?@\x07n\x02\x02@A\x07u\x02\x02AB\x07" +
		"g\x02\x02B\x12\x03\x02\x02\x02CH\x05\x19\r\x02DG\x05\x19\r\x02EG\x05\x1B" +
		"\x0E\x02FD\x03\x02\x02\x02FE\x03\x02\x02\x02GJ\x03\x02\x02\x02HF\x03\x02" +
		"\x02\x02HI\x03\x02\x02\x02I\x14\x03\x02\x02\x02JH\x03\x02\x02\x02KO\x05" +
		"\x1D\x0F\x02LN\x05\x1B\x0E\x02ML\x03\x02\x02\x02NQ\x03\x02\x02\x02OM\x03" +
		"\x02\x02\x02OP\x03\x02\x02\x02P\x16\x03\x02\x02\x02QO\x03\x02\x02\x02" +
		"RV\x07)\x02\x02SU\x05!\x11\x02TS\x03\x02\x02\x02UX\x03\x02\x02\x02VT\x03" +
		"\x02\x02\x02VW\x03\x02\x02\x02WY\x03\x02\x02\x02XV\x03\x02\x02\x02YZ\x07" +
		")\x02\x02Z\x18\x03\x02\x02\x02[\\\t\x02\x02\x02\\\x1A\x03\x02\x02\x02" +
		"]^\t\x03\x02\x02^\x1C\x03\x02\x02\x02_`\t\x04\x02\x02`\x1E\x03\x02\x02" +
		"\x02ab\x07^\x02\x02bc\t\x05\x02\x02c \x03\x02\x02\x02dg\n\x06\x02\x02" +
		"eg\x05\x1F\x10\x02fd\x03\x02\x02\x02fe\x03\x02\x02\x02g\"\x03\x02\x02" +
		"\x02hj\t\x07\x02\x02ih\x03\x02\x02\x02jk\x03\x02\x02\x02ki\x03\x02\x02" +
		"\x02kl\x03\x02\x02\x02lm\x03\x02\x02\x02mn\b\x12\x02\x02n$\x03\x02\x02" +
		"\x02\t\x02FHOVfk\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ArmLangLexer.__ATN) {
			ArmLangLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ArmLangLexer._serializedATN));
		}

		return ArmLangLexer.__ATN;
	}

}


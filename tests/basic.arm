input string rgLocation
input string namePrefix
input string myNewParam

module publicIpAddress {
  input string name
  input string location

  resource azrm 'Network/publicIpAddresses@2019-11-01' publicIp {
    name: name
    location: location
    properties: {
      publicIPAllocationMethod: 'Dynamic'
    }
  }
}

resource azrm 'Network/virtualNetworks/subnets@2019-11-01' mySubnet {
  name: concat('myVnet/', namePrefix, '-subnet')
  location: rgLocation
  properties: {
    addressPrefix: '10.0.0.0/24'
  }
}

resource azrm 'Network/networkInterfaces@2019-11-01' myNic {
  name: concat(namePrefix, '-nic')
  location: rgLocation
  properties: {
    ipConfigurations: [{
      name: 'myConfig'
      properties: {
        subnet: subnetReference
        privateIPAllocationMethod: 'Dynamic'
      }
    }]
    // should I be able to declare an input here and use it above?
  }
}
output nicId resourceId(myNic)
output myNewOutput 'test'

variable subnetReference {
  id: resourceId(mySubnet)
}

// this comment should be ignored

/* this block comment should be ignored
resource azrm 'Network/publicIpAddresses@2019-11-01' myPip {
  name: concat(namePrefix, '-pip')
  properties: {
  }
}
*/

resource mod 'publicIpAddress' pip1 {
  name: 'myPipName' // concat(namePrefix, '-pip1')
  location: rgLocation
}

// modules are ignored for now, but note that identifier clashes (redefining inputs or resources) are allowed due to scoping
/*
module testModule {
  input string location
  input string namePrefix

  resource azrm 'network/publicIpAddresses@2019-11-01' myPip {
    name: concat(namePrefix, '-pip')
    location: location
    properties: {
      publicIPAllocationMethod: 'Dynamic'
    }
  }
}
*/

// script myScript {
  // write a script here

  // how do I get outputs?
// }
// var myScript.outputs.something

output nicResourceId: resourceId(myNic)
